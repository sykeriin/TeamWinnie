# run_local_decode.py
import re
from tokenizer import tokenize_metar
try:
    from gemini_client import gemini_brief_from_tokens
except Exception:
    gemini_brief_from_tokens = None

def deterministic_summary(t: dict) -> str:
    parts = []
    ceil = None
    if t.get("vv"):
        ceil = t["vv"]
    else:
        bases = [int(b)*100 for c, b in t.get("clouds", []) if c in ("BKN","OVC")]
        ceil = min(bases) if bases else None
    if (t.get("vis") in ["1/4SM","1/2SM","3/4SM","1SM","2SM"]) or (ceil is not None and ceil < 1000):
        parts.append("IFR conditions")
    if t.get("vis"):
        parts.append(f"Visibility {t['vis']}")
    if ceil:
        parts.append(f"Ceiling {ceil} ft")
    elif t.get("clouds"):
        parts.append("Clouds " + ", ".join([f"{c} {int(b)*100} ft" for c, b in t["clouds"]]))
    if t.get("wind"):
        w = t["wind"]; s = f"Winds {w['dir']}° at {w['spd']} kt"
        if w.get("gst"): s += f", gusting {w['gst']} kt"
        parts.append(s)
    if t.get("wx"):
        parts.append("Weather " + ", ".join(t["wx"]))
    if t.get("temp") and t.get("dew"):
        parts.append(f"Temp {t['temp']}°C, dew {t['dew']}°C")
    if t.get("alt"):
        parts.append(f"Altimeter {t['alt']}")
    return ". ".join(parts) + "."

def is_raw_metar(line: str) -> bool:
    s = line.strip()
    return bool(re.match(r"^(METAR|SPECI)\s+[A-Z0-9]{4}\s+\d{6}Z", s)) or bool(re.match(r"^[A-Z0-9]{4}\s+\d{6}Z", s))

def clean_raw(raw: str) -> str:
    raw = raw.strip()
    if raw.startswith("METAR "): raw = raw[6:]
    if raw.startswith("SPECI "): raw = raw[6:]
    return raw

def main():
    with open("test.http", "r", encoding="utf-8") as f:
        for line in f:
            if not is_raw_metar(line):
                continue
            raw = clean_raw(line)
            tokens = tokenize_metar(raw)
            summary = deterministic_summary(tokens)
            if gemini_brief_from_tokens:
                try:
                    llm = gemini_brief_from_tokens(tokens)
                    if llm and isinstance(llm, str) and len(llm) > 0:
                        summary = llm
                except Exception:
                    pass
            icao = tokens.get("station") or "UNKNOWN"
            print(f"{icao}: {summary}")

if __name__ == "__main__":
    main()
